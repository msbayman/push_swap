# include<stddef.h>
# include<unistd.h>
# include<limits.h>
# include<stdlib.h>




typedef struct s_list
{
    int            data;
    struct s_list    *prev;
    struct s_list    *next;

}    t_list;

t_list    *ft_lstprev(t_list **lst)
{
  t_list    *p;
  t_list *prev;
  
  p = lst;
   while (p -> next != NULL)
   {
            prev = p;
            p = p -> next;
            
   }    
        return (prev);
}

t_list    *ft_lstlast(t_list *lst)
{
    t_list    *p;

    p = lst;
    if (p == NULL)
    {
        return (NULL);
    }
    else
    {
        while (p -> next != NULL)
            p = p -> next;
        return (p);
    }
}

t_list    *ft_lstnew(int k)
{
    t_list    *p;
    
    p = malloc(sizeof(t_list));
    if (p != NULL)
    {
        p -> data = k;
        p -> next = NULL;
        p -> prev = NULL;
    }
    return (p);
}

void    ft_lstadd_back(t_list **lst, t_list *new)
{
    t_list    *p;
    t_list    *temp;

    if (lst)
    {
        if (!*lst)
            *lst = new;
        else
        {
            p = ft_lstlast(*lst);
            p -> next = new;

        }
    }    
}


int main() {
t_list *h = NULL;

t_list *a = ft_lstnew(1);
t_list *b = ft_lstnew(2);
t_list *c = ft_lstnew(3);

ft_lstadd_back(&h,a);
ft_lstadd_back(&h,b);
ft_lstadd_back(&h,c);
}